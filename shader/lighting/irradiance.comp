#version 450

#extension GL_EXT_control_flow_attributes : enable
#extension GL_GOOGLE_include_directive    : enable

#include "scene.glsl"
#include "common.glsl"

layout(local_size_x = 128) in;

shared vec4 samples[gl_WorkGroupSize.x][3][2]; // 12 Kb

layout(binding = 0) uniform writeonly image2D result;
layout(binding = 1, std140) uniform UboScene {
  SceneDesc scene;
  };
layout(binding = 2) uniform sampler2D skyLUT;

void storeSample(vec3 dir, vec3 val) {
  for(int i=0; i<3; ++i) {
    float v = dir[i];
    int   d = v>=0 ? 1 : 0;
    v = abs(v);
    samples[gl_LocalInvocationIndex][i][d] += vec4(val*v, 1);
    }
  }

vec3 resolveMiss(const vec3 rayOrigin, const vec3 rayDirection) {
  // PERF: need to preload sky lut early in shader
  const vec3 lcolor  = textureSkyLUT(skyLUT, vec3(0,RPlanet,0), rayDirection, scene.sunDir) * scene.GSunIntensity;
  const vec3 ambient = scene.ambient; // no proper multi-bounce yet

  vec3 color = vec3(0);
  color += lcolor;
  return color;
  }

void gather() {
  const uint smpCount = 8;

  for(uint i=0; i<smpCount; ++i) {
    vec3 dir = sampleHemisphere(gl_LocalInvocationIndex*smpCount+i, gl_WorkGroupSize.x*smpCount, 0);

    vec3 sky = vec3(0);
    sky = resolveMiss(vec3(0), +dir);
    storeSample(+dir, sky);

    sky = resolveMiss(vec3(0), -dir);
    storeSample(-dir, sky);
    }
  }

void main() {
  const uint laneId = gl_LocalInvocationIndex;
  for(int i=0; i<3; ++i) {
    samples[laneId][i][0] = vec4(0);
    samples[laneId][i][1] = vec4(0);
    }
  barrier();

  gather();
  barrier();

  for(uint i=gl_WorkGroupSize.x; i>0;) {
    i /= 2;
    if(laneId<i) {
      for(int r=0; r<3; ++r) {
        samples[laneId][r][0] += samples[laneId+i][r][0];
        samples[laneId][r][1] += samples[laneId+i][r][1];
        }
      }
    barrier();
    }

  if(laneId<3) {
    vec4 a = samples[0][laneId][0];
    vec4 b = samples[0][laneId][1];

    if(a.w>0)
      a.rgb /= a.w;
    if(b.w>0)
      b.rgb /= b.w;

    imageStore(result, ivec2(laneId,0), vec4(a.rgb*2.0,1.0));
    imageStore(result, ivec2(laneId,1), vec4(b.rgb*2.0,1.0));
    }
  }


void main2() {
  const uint laneId = gl_LocalInvocationIndex;
  const vec3 N[6] = {vec3(-1,0,0), vec3(1,0,0), vec3(0,-1,0), vec3(0,1,0), vec3(0,0,-1), vec3(0,0,1)};

  if(laneId>=6)
    return;

  vec3 irradiance = vec3(0.0);

  vec3 normal = N[laneId];
  vec3 up     = normal.yxz;
  vec3 right  = normal.yzx;

  float nrSamples = 0.0;

  const int smpCount = 32;
  for(int i=0; i<smpCount; ++i) {
    for(int r=0; r<smpCount; ++r) {
      float phi   = 2.0*M_PI*i/float(smpCount);
      float theta = 0.5*M_PI*r/float(smpCount);
      // spherical to cartesian (in tangent space)
      vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
      // tangent space to world
      vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;

      vec3 smp = textureSkyLUT(skyLUT, vec3(0,RPlanet,0), sampleVec, scene.sunDir);
      smp *= cos(theta) * sin(theta);

      irradiance += smp;
      nrSamples++;
      }
    }

  irradiance = M_PI * irradiance * (1.0 / float(nrSamples));
  irradiance *= scene.GSunIntensity;

  imageStore(result, ivec2(laneId/2,laneId%2), vec4(irradiance.rgb,1.0));
  }
